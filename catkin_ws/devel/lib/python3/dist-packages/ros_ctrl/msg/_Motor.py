# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_ctrl/Motor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Motor(genpy.Message):
  _md5sum = "d10d1cd9c18069d9a59d0d6841c64eb0"
  _type = "ros_ctrl/Motor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 pos_desired
float64 pos_actual
float64 vel_desired
float64 vel_actual
float64 cur_desired
float64 cur_actual
float64 temperature
float64 Kp
float64 Kb
float64 Angle_eq
float64 error"""
  __slots__ = ['pos_desired','pos_actual','vel_desired','vel_actual','cur_desired','cur_actual','temperature','Kp','Kb','Angle_eq','error']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_desired,pos_actual,vel_desired,vel_actual,cur_desired,cur_actual,temperature,Kp,Kb,Angle_eq,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pos_desired is None:
        self.pos_desired = 0.
      if self.pos_actual is None:
        self.pos_actual = 0.
      if self.vel_desired is None:
        self.vel_desired = 0.
      if self.vel_actual is None:
        self.vel_actual = 0.
      if self.cur_desired is None:
        self.cur_desired = 0.
      if self.cur_actual is None:
        self.cur_actual = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.Kp is None:
        self.Kp = 0.
      if self.Kb is None:
        self.Kb = 0.
      if self.Angle_eq is None:
        self.Angle_eq = 0.
      if self.error is None:
        self.error = 0.
    else:
      self.pos_desired = 0.
      self.pos_actual = 0.
      self.vel_desired = 0.
      self.vel_actual = 0.
      self.cur_desired = 0.
      self.cur_actual = 0.
      self.temperature = 0.
      self.Kp = 0.
      self.Kb = 0.
      self.Angle_eq = 0.
      self.error = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11d().pack(_x.pos_desired, _x.pos_actual, _x.vel_desired, _x.vel_actual, _x.cur_desired, _x.cur_actual, _x.temperature, _x.Kp, _x.Kb, _x.Angle_eq, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.pos_desired, _x.pos_actual, _x.vel_desired, _x.vel_actual, _x.cur_desired, _x.cur_actual, _x.temperature, _x.Kp, _x.Kb, _x.Angle_eq, _x.error,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11d().pack(_x.pos_desired, _x.pos_actual, _x.vel_desired, _x.vel_actual, _x.cur_desired, _x.cur_actual, _x.temperature, _x.Kp, _x.Kb, _x.Angle_eq, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.pos_desired, _x.pos_actual, _x.vel_desired, _x.vel_actual, _x.cur_desired, _x.cur_actual, _x.temperature, _x.Kp, _x.Kb, _x.Angle_eq, _x.error,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
