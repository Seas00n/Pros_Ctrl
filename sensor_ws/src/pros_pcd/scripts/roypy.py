# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _roypy
else:
    import _roypy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_SwigPyIterator

    def value(self):
        return _roypy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _roypy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _roypy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _roypy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _roypy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _roypy.SwigPyIterator_copy(self)

    def next(self):
        return _roypy.SwigPyIterator_next(self)

    def __next__(self):
        return _roypy.SwigPyIterator___next__(self)

    def previous(self):
        return _roypy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _roypy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _roypy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _roypy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _roypy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _roypy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _roypy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _roypy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _roypy:
_roypy.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.StringVector___nonzero__(self)

    def __bool__(self):
        return _roypy.StringVector___bool__(self)

    def __len__(self):
        return _roypy.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.StringVector___setitem__(self, *args)

    def pop(self):
        return _roypy.StringVector_pop(self)

    def append(self, x):
        return _roypy.StringVector_append(self, x)

    def empty(self):
        return _roypy.StringVector_empty(self)

    def size(self):
        return _roypy.StringVector_size(self)

    def swap(self, v):
        return _roypy.StringVector_swap(self, v)

    def begin(self):
        return _roypy.StringVector_begin(self)

    def end(self):
        return _roypy.StringVector_end(self)

    def rbegin(self):
        return _roypy.StringVector_rbegin(self)

    def rend(self):
        return _roypy.StringVector_rend(self)

    def clear(self):
        return _roypy.StringVector_clear(self)

    def get_allocator(self):
        return _roypy.StringVector_get_allocator(self)

    def pop_back(self):
        return _roypy.StringVector_pop_back(self)

    def erase(self, *args):
        return _roypy.StringVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.StringVector_swiginit(self, _roypy.new_StringVector(*args))

    def push_back(self, x):
        return _roypy.StringVector_push_back(self, x)

    def front(self):
        return _roypy.StringVector_front(self)

    def back(self):
        return _roypy.StringVector_back(self)

    def assign(self, n, x):
        return _roypy.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.StringVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.StringVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.StringVector_reserve(self, n)

    def capacity(self):
        return _roypy.StringVector_capacity(self)
    __swig_destroy__ = _roypy.delete_StringVector

# Register StringVector in _roypy:
_roypy.StringVector_swigregister(StringVector)

class PointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.PointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.PointVector___nonzero__(self)

    def __bool__(self):
        return _roypy.PointVector___bool__(self)

    def __len__(self):
        return _roypy.PointVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.PointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.PointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.PointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.PointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.PointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.PointVector___setitem__(self, *args)

    def pop(self):
        return _roypy.PointVector_pop(self)

    def append(self, x):
        return _roypy.PointVector_append(self, x)

    def empty(self):
        return _roypy.PointVector_empty(self)

    def size(self):
        return _roypy.PointVector_size(self)

    def swap(self, v):
        return _roypy.PointVector_swap(self, v)

    def begin(self):
        return _roypy.PointVector_begin(self)

    def end(self):
        return _roypy.PointVector_end(self)

    def rbegin(self):
        return _roypy.PointVector_rbegin(self)

    def rend(self):
        return _roypy.PointVector_rend(self)

    def clear(self):
        return _roypy.PointVector_clear(self)

    def get_allocator(self):
        return _roypy.PointVector_get_allocator(self)

    def pop_back(self):
        return _roypy.PointVector_pop_back(self)

    def erase(self, *args):
        return _roypy.PointVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.PointVector_swiginit(self, _roypy.new_PointVector(*args))

    def push_back(self, x):
        return _roypy.PointVector_push_back(self, x)

    def front(self):
        return _roypy.PointVector_front(self)

    def back(self):
        return _roypy.PointVector_back(self)

    def assign(self, n, x):
        return _roypy.PointVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.PointVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.PointVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.PointVector_reserve(self, n)

    def capacity(self):
        return _roypy.PointVector_capacity(self)
    __swig_destroy__ = _roypy.delete_PointVector

# Register PointVector in _roypy:
_roypy.PointVector_swigregister(PointVector)

class InterPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.InterPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.InterPointVector___nonzero__(self)

    def __bool__(self):
        return _roypy.InterPointVector___bool__(self)

    def __len__(self):
        return _roypy.InterPointVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.InterPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.InterPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.InterPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.InterPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.InterPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.InterPointVector___setitem__(self, *args)

    def pop(self):
        return _roypy.InterPointVector_pop(self)

    def append(self, x):
        return _roypy.InterPointVector_append(self, x)

    def empty(self):
        return _roypy.InterPointVector_empty(self)

    def size(self):
        return _roypy.InterPointVector_size(self)

    def swap(self, v):
        return _roypy.InterPointVector_swap(self, v)

    def begin(self):
        return _roypy.InterPointVector_begin(self)

    def end(self):
        return _roypy.InterPointVector_end(self)

    def rbegin(self):
        return _roypy.InterPointVector_rbegin(self)

    def rend(self):
        return _roypy.InterPointVector_rend(self)

    def clear(self):
        return _roypy.InterPointVector_clear(self)

    def get_allocator(self):
        return _roypy.InterPointVector_get_allocator(self)

    def pop_back(self):
        return _roypy.InterPointVector_pop_back(self)

    def erase(self, *args):
        return _roypy.InterPointVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.InterPointVector_swiginit(self, _roypy.new_InterPointVector(*args))

    def push_back(self, x):
        return _roypy.InterPointVector_push_back(self, x)

    def front(self):
        return _roypy.InterPointVector_front(self)

    def back(self):
        return _roypy.InterPointVector_back(self)

    def assign(self, n, x):
        return _roypy.InterPointVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.InterPointVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.InterPointVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.InterPointVector_reserve(self, n)

    def capacity(self):
        return _roypy.InterPointVector_capacity(self)
    __swig_destroy__ = _roypy.delete_InterPointVector

# Register InterPointVector in _roypy:
_roypy.InterPointVector_swigregister(InterPointVector)

class StreamVecVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.StreamVecVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.StreamVecVector___nonzero__(self)

    def __bool__(self):
        return _roypy.StreamVecVector___bool__(self)

    def __len__(self):
        return _roypy.StreamVecVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.StreamVecVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.StreamVecVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.StreamVecVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.StreamVecVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.StreamVecVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.StreamVecVector___setitem__(self, *args)

    def pop(self):
        return _roypy.StreamVecVector_pop(self)

    def append(self, x):
        return _roypy.StreamVecVector_append(self, x)

    def empty(self):
        return _roypy.StreamVecVector_empty(self)

    def size(self):
        return _roypy.StreamVecVector_size(self)

    def swap(self, v):
        return _roypy.StreamVecVector_swap(self, v)

    def begin(self):
        return _roypy.StreamVecVector_begin(self)

    def end(self):
        return _roypy.StreamVecVector_end(self)

    def rbegin(self):
        return _roypy.StreamVecVector_rbegin(self)

    def rend(self):
        return _roypy.StreamVecVector_rend(self)

    def clear(self):
        return _roypy.StreamVecVector_clear(self)

    def get_allocator(self):
        return _roypy.StreamVecVector_get_allocator(self)

    def pop_back(self):
        return _roypy.StreamVecVector_pop_back(self)

    def erase(self, *args):
        return _roypy.StreamVecVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.StreamVecVector_swiginit(self, _roypy.new_StreamVecVector(*args))

    def push_back(self, x):
        return _roypy.StreamVecVector_push_back(self, x)

    def front(self):
        return _roypy.StreamVecVector_front(self)

    def back(self):
        return _roypy.StreamVecVector_back(self)

    def assign(self, n, x):
        return _roypy.StreamVecVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.StreamVecVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.StreamVecVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.StreamVecVector_reserve(self, n)

    def capacity(self):
        return _roypy.StreamVecVector_capacity(self)
    __swig_destroy__ = _roypy.delete_StreamVecVector

# Register StreamVecVector in _roypy:
_roypy.StreamVecVector_swigregister(StreamVecVector)

class Uint8VecVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.Uint8VecVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.Uint8VecVector___nonzero__(self)

    def __bool__(self):
        return _roypy.Uint8VecVector___bool__(self)

    def __len__(self):
        return _roypy.Uint8VecVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.Uint8VecVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.Uint8VecVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.Uint8VecVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.Uint8VecVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.Uint8VecVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.Uint8VecVector___setitem__(self, *args)

    def pop(self):
        return _roypy.Uint8VecVector_pop(self)

    def append(self, x):
        return _roypy.Uint8VecVector_append(self, x)

    def empty(self):
        return _roypy.Uint8VecVector_empty(self)

    def size(self):
        return _roypy.Uint8VecVector_size(self)

    def swap(self, v):
        return _roypy.Uint8VecVector_swap(self, v)

    def begin(self):
        return _roypy.Uint8VecVector_begin(self)

    def end(self):
        return _roypy.Uint8VecVector_end(self)

    def rbegin(self):
        return _roypy.Uint8VecVector_rbegin(self)

    def rend(self):
        return _roypy.Uint8VecVector_rend(self)

    def clear(self):
        return _roypy.Uint8VecVector_clear(self)

    def get_allocator(self):
        return _roypy.Uint8VecVector_get_allocator(self)

    def pop_back(self):
        return _roypy.Uint8VecVector_pop_back(self)

    def erase(self, *args):
        return _roypy.Uint8VecVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.Uint8VecVector_swiginit(self, _roypy.new_Uint8VecVector(*args))

    def push_back(self, x):
        return _roypy.Uint8VecVector_push_back(self, x)

    def front(self):
        return _roypy.Uint8VecVector_front(self)

    def back(self):
        return _roypy.Uint8VecVector_back(self)

    def assign(self, n, x):
        return _roypy.Uint8VecVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.Uint8VecVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.Uint8VecVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.Uint8VecVector_reserve(self, n)

    def capacity(self):
        return _roypy.Uint8VecVector_capacity(self)
    __swig_destroy__ = _roypy.delete_Uint8VecVector

# Register Uint8VecVector in _roypy:
_roypy.Uint8VecVector_swigregister(Uint8VecVector)

class Uint32VecVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.Uint32VecVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.Uint32VecVector___nonzero__(self)

    def __bool__(self):
        return _roypy.Uint32VecVector___bool__(self)

    def __len__(self):
        return _roypy.Uint32VecVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.Uint32VecVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.Uint32VecVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.Uint32VecVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.Uint32VecVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.Uint32VecVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.Uint32VecVector___setitem__(self, *args)

    def pop(self):
        return _roypy.Uint32VecVector_pop(self)

    def append(self, x):
        return _roypy.Uint32VecVector_append(self, x)

    def empty(self):
        return _roypy.Uint32VecVector_empty(self)

    def size(self):
        return _roypy.Uint32VecVector_size(self)

    def swap(self, v):
        return _roypy.Uint32VecVector_swap(self, v)

    def begin(self):
        return _roypy.Uint32VecVector_begin(self)

    def end(self):
        return _roypy.Uint32VecVector_end(self)

    def rbegin(self):
        return _roypy.Uint32VecVector_rbegin(self)

    def rend(self):
        return _roypy.Uint32VecVector_rend(self)

    def clear(self):
        return _roypy.Uint32VecVector_clear(self)

    def get_allocator(self):
        return _roypy.Uint32VecVector_get_allocator(self)

    def pop_back(self):
        return _roypy.Uint32VecVector_pop_back(self)

    def erase(self, *args):
        return _roypy.Uint32VecVector_erase(self, *args)

    def __init__(self, *args):
        _roypy.Uint32VecVector_swiginit(self, _roypy.new_Uint32VecVector(*args))

    def push_back(self, x):
        return _roypy.Uint32VecVector_push_back(self, x)

    def front(self):
        return _roypy.Uint32VecVector_front(self)

    def back(self):
        return _roypy.Uint32VecVector_back(self)

    def assign(self, n, x):
        return _roypy.Uint32VecVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.Uint32VecVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.Uint32VecVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.Uint32VecVector_reserve(self, n)

    def capacity(self):
        return _roypy.Uint32VecVector_capacity(self)
    __swig_destroy__ = _roypy.delete_Uint32VecVector

# Register Uint32VecVector in _roypy:
_roypy.Uint32VecVector_swigregister(Uint32VecVector)


def getVersionString ():
    a,b,c,d = getVersion()
    return str(a)+'.'+str(b)+'.'+str(c)+'.'+str(d)

class ICameraDevicePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self):
        return _roypy.ICameraDevicePtr___deref__(self)

    def get(self):
        return _roypy.ICameraDevicePtr_get(self)

    def __init__(self):
        _roypy.ICameraDevicePtr_swiginit(self, _roypy.new_ICameraDevicePtr())
    __swig_destroy__ = _roypy.delete_ICameraDevicePtr

    def initialize(self, *args):
        return _roypy.ICameraDevicePtr_initialize(self, *args)

    def getId(self):
        return _roypy.ICameraDevicePtr_getId(self)

    def getCameraName(self):
        return _roypy.ICameraDevicePtr_getCameraName(self)

    def getCameraInfo(self, *args):
        return _roypy.ICameraDevicePtr_getCameraInfo(self, *args)

    def setUseCase(self, name):
        return _roypy.ICameraDevicePtr_setUseCase(self, name)

    def getUseCases(self):
        return _roypy.ICameraDevicePtr_getUseCases(self)

    def getStreams(self):
        return _roypy.ICameraDevicePtr_getStreams(self)

    def getNumberOfStreams(self, *args):
        return _roypy.ICameraDevicePtr_getNumberOfStreams(self, *args)

    def getCurrentUseCase(self):
        return _roypy.ICameraDevicePtr_getCurrentUseCase(self)

    def setExposureTime(self, *args):
        return _roypy.ICameraDevicePtr_setExposureTime(self, *args)

    def setExposureMode(self, exposureMode, streamId=0):
        return _roypy.ICameraDevicePtr_setExposureMode(self, exposureMode, streamId)

    def getExposureMode(self, streamId=0):
        return _roypy.ICameraDevicePtr_getExposureMode(self, streamId)

    def getExposureLimits(self, *args):
        return _roypy.ICameraDevicePtr_getExposureLimits(self, *args)

    def registerDataListener(self, listener):
        return _roypy.ICameraDevicePtr_registerDataListener(self, listener)

    def unregisterDataListener(self):
        return _roypy.ICameraDevicePtr_unregisterDataListener(self)

    def registerDepthImageListener(self, listener):
        return _roypy.ICameraDevicePtr_registerDepthImageListener(self, listener)

    def unregisterDepthImageListener(self):
        return _roypy.ICameraDevicePtr_unregisterDepthImageListener(self)

    def registerPointCloudListener(self, listener):
        return _roypy.ICameraDevicePtr_registerPointCloudListener(self, listener)

    def unregisterPointCloudListener(self):
        return _roypy.ICameraDevicePtr_unregisterPointCloudListener(self)

    def registerIRImageListener(self, listener):
        return _roypy.ICameraDevicePtr_registerIRImageListener(self, listener)

    def unregisterIRImageListener(self):
        return _roypy.ICameraDevicePtr_unregisterIRImageListener(self)

    def registerDepthIRImageListener(self, listener):
        return _roypy.ICameraDevicePtr_registerDepthIRImageListener(self, listener)

    def unregisterDepthIRImageListener(self):
        return _roypy.ICameraDevicePtr_unregisterDepthIRImageListener(self)

    def registerRawDataListener(self, listener):
        return _roypy.ICameraDevicePtr_registerRawDataListener(self, listener)

    def unregisterRawDataListener(self):
        return _roypy.ICameraDevicePtr_unregisterRawDataListener(self)

    def registerEventListener(self, listener):
        return _roypy.ICameraDevicePtr_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.ICameraDevicePtr_unregisterEventListener(self)

    def startCapture(self):
        return _roypy.ICameraDevicePtr_startCapture(self)

    def stopCapture(self):
        return _roypy.ICameraDevicePtr_stopCapture(self)

    def getMaxSensorWidth(self):
        return _roypy.ICameraDevicePtr_getMaxSensorWidth(self)

    def getMaxSensorHeight(self):
        return _roypy.ICameraDevicePtr_getMaxSensorHeight(self)

    def getLensParameters(self, *args):
        return _roypy.ICameraDevicePtr_getLensParameters(self, *args)

    def isConnected(self):
        return _roypy.ICameraDevicePtr_isConnected(self)

    def isCalibrated(self):
        return _roypy.ICameraDevicePtr_isCalibrated(self)

    def isCapturing(self):
        return _roypy.ICameraDevicePtr_isCapturing(self)

    def getAccessLevel(self):
        return _roypy.ICameraDevicePtr_getAccessLevel(self)

    def startRecording(self, fileName, numberOfFrames=0, frameSkip=0, msSkip=0):
        return _roypy.ICameraDevicePtr_startRecording(self, fileName, numberOfFrames, frameSkip, msSkip)

    def stopRecording(self):
        return _roypy.ICameraDevicePtr_stopRecording(self)

    def registerRecordListener(self, listener):
        return _roypy.ICameraDevicePtr_registerRecordListener(self, listener)

    def unregisterRecordListener(self):
        return _roypy.ICameraDevicePtr_unregisterRecordListener(self)

    def registerExposureListener(self, listener):
        return _roypy.ICameraDevicePtr_registerExposureListener(self, listener)

    def unregisterExposureListener(self):
        return _roypy.ICameraDevicePtr_unregisterExposureListener(self)

    def registerExposureGroupListener(self, listener):
        return _roypy.ICameraDevicePtr_registerExposureGroupListener(self, listener)

    def unregisterExposureGroupListener(self):
        return _roypy.ICameraDevicePtr_unregisterExposureGroupListener(self)

    def setFrameRate(self, framerate):
        return _roypy.ICameraDevicePtr_setFrameRate(self, framerate)

    def getFrameRate(self):
        return _roypy.ICameraDevicePtr_getFrameRate(self)

    def getMaxFrameRate(self):
        return _roypy.ICameraDevicePtr_getMaxFrameRate(self)

    def setExternalTrigger(self, useExternalTrigger):
        return _roypy.ICameraDevicePtr_setExternalTrigger(self, useExternalTrigger)

    def setFilterPreset(self, preset, streamId=0):
        return _roypy.ICameraDevicePtr_setFilterPreset(self, preset, streamId)

    def getFilterPreset(self, streamId=0):
        return _roypy.ICameraDevicePtr_getFilterPreset(self, streamId)

    def getFilterPresets(self, presets, streamId=0):
        return _roypy.ICameraDevicePtr_getFilterPresets(self, presets, streamId)

    def storeProcessingParams(self):
        return _roypy.ICameraDevicePtr_storeProcessingParams(self)

    def loadProcessingParams(self):
        return _roypy.ICameraDevicePtr_loadProcessingParams(self)

    def isDepthSupported(self, streamId=0):
        return _roypy.ICameraDevicePtr_isDepthSupported(self, streamId)

    def getExposureGroups(self):
        return _roypy.ICameraDevicePtr_getExposureGroups(self)

    def setExposureForGroups(self):
        return _roypy.ICameraDevicePtr_setExposureForGroups(self)

    def setProcessingParameters(self, parameters, streamId=0):
        return _roypy.ICameraDevicePtr_setProcessingParameters(self, parameters, streamId)

    def getProcessingParameters(self, streamId=0):
        return _roypy.ICameraDevicePtr_getProcessingParameters(self, streamId)

    def registerDataListenerExtended(self, listener):
        return _roypy.ICameraDevicePtr_registerDataListenerExtended(self, listener)

    def unregisterDataListenerExtended(self):
        return _roypy.ICameraDevicePtr_unregisterDataListenerExtended(self)

    def setCallbackData(self, *args):
        return _roypy.ICameraDevicePtr_setCallbackData(self, *args)

    def getCalibrationData(self):
        return _roypy.ICameraDevicePtr_getCalibrationData(self)

    def writeCalibrationToFlash(self):
        return _roypy.ICameraDevicePtr_writeCalibrationToFlash(self)

    def setProcessingThreads(self, numThreads, streamId=0):
        return _roypy.ICameraDevicePtr_setProcessingThreads(self, numThreads, streamId)

    def writeDataToFlash(self, *args):
        return _roypy.ICameraDevicePtr_writeDataToFlash(self, *args)

    def setDutyCycle(self, dutyCycle, index):
        return _roypy.ICameraDevicePtr_setDutyCycle(self, dutyCycle, index)

    def shiftLensCenter(self, tx, ty):
        return _roypy.ICameraDevicePtr_shiftLensCenter(self, tx, ty)

    def getLensCenterX(self):
        return _roypy.ICameraDevicePtr_getLensCenterX(self)

    def getLensCenterY(self):
        return _roypy.ICameraDevicePtr_getLensCenterY(self)

    def readRegister(self, registerAddress):
        return _roypy.ICameraDevicePtr_readRegister(self, registerAddress)

    def writeRegister(self, registerAddress, registerValue):
        return _roypy.ICameraDevicePtr_writeRegister(self, registerAddress, registerValue)

    def setExposureTimes(self, exposureTimes):
        return _roypy.ICameraDevicePtr_setExposureTimes(self, exposureTimes)

    def asReplay(self):
        return _roypy.ICameraDevicePtr_asReplay(self)

    def setCalibrationDataFromFile(self, filename):
        return _roypy.ICameraDevicePtr_setCalibrationDataFromFile(self, filename)

    def setCalibrationDataFromBuffer(self, data):
        return _roypy.ICameraDevicePtr_setCalibrationDataFromBuffer(self, data)

# Register ICameraDevicePtr in _roypy:
_roypy.ICameraDevicePtr_swigregister(ICameraDevicePtr)

class LensParamMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.LensParamMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.LensParamMap___nonzero__(self)

    def __bool__(self):
        return _roypy.LensParamMap___bool__(self)

    def __len__(self):
        return _roypy.LensParamMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _roypy.LensParamMap___getitem__(self, key)

    def __delitem__(self, key):
        return _roypy.LensParamMap___delitem__(self, key)

    def has_key(self, key):
        return _roypy.LensParamMap_has_key(self, key)

    def keys(self):
        return _roypy.LensParamMap_keys(self)

    def values(self):
        return _roypy.LensParamMap_values(self)

    def items(self):
        return _roypy.LensParamMap_items(self)

    def __contains__(self, key):
        return _roypy.LensParamMap___contains__(self, key)

    def key_iterator(self):
        return _roypy.LensParamMap_key_iterator(self)

    def value_iterator(self):
        return _roypy.LensParamMap_value_iterator(self)

    def __setitem__(self, *args):
        return _roypy.LensParamMap___setitem__(self, *args)

    def asdict(self):
        return _roypy.LensParamMap_asdict(self)

    def __init__(self, *args):
        _roypy.LensParamMap_swiginit(self, _roypy.new_LensParamMap(*args))

    def empty(self):
        return _roypy.LensParamMap_empty(self)

    def size(self):
        return _roypy.LensParamMap_size(self)

    def swap(self, v):
        return _roypy.LensParamMap_swap(self, v)

    def begin(self):
        return _roypy.LensParamMap_begin(self)

    def end(self):
        return _roypy.LensParamMap_end(self)

    def rbegin(self):
        return _roypy.LensParamMap_rbegin(self)

    def rend(self):
        return _roypy.LensParamMap_rend(self)

    def clear(self):
        return _roypy.LensParamMap_clear(self)

    def get_allocator(self):
        return _roypy.LensParamMap_get_allocator(self)

    def count(self, x):
        return _roypy.LensParamMap_count(self, x)

    def erase(self, *args):
        return _roypy.LensParamMap_erase(self, *args)

    def find(self, x):
        return _roypy.LensParamMap_find(self, x)

    def lower_bound(self, x):
        return _roypy.LensParamMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _roypy.LensParamMap_upper_bound(self, x)
    __swig_destroy__ = _roypy.delete_LensParamMap

# Register LensParamMap in _roypy:
_roypy.LensParamMap_swigregister(LensParamMap)

class CamInfoMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.CamInfoMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.CamInfoMap___nonzero__(self)

    def __bool__(self):
        return _roypy.CamInfoMap___bool__(self)

    def __len__(self):
        return _roypy.CamInfoMap___len__(self)

    def __getslice__(self, i, j):
        return _roypy.CamInfoMap___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.CamInfoMap___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.CamInfoMap___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.CamInfoMap___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.CamInfoMap___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.CamInfoMap___setitem__(self, *args)

    def pop(self):
        return _roypy.CamInfoMap_pop(self)

    def append(self, x):
        return _roypy.CamInfoMap_append(self, x)

    def empty(self):
        return _roypy.CamInfoMap_empty(self)

    def size(self):
        return _roypy.CamInfoMap_size(self)

    def swap(self, v):
        return _roypy.CamInfoMap_swap(self, v)

    def begin(self):
        return _roypy.CamInfoMap_begin(self)

    def end(self):
        return _roypy.CamInfoMap_end(self)

    def rbegin(self):
        return _roypy.CamInfoMap_rbegin(self)

    def rend(self):
        return _roypy.CamInfoMap_rend(self)

    def clear(self):
        return _roypy.CamInfoMap_clear(self)

    def get_allocator(self):
        return _roypy.CamInfoMap_get_allocator(self)

    def pop_back(self):
        return _roypy.CamInfoMap_pop_back(self)

    def erase(self, *args):
        return _roypy.CamInfoMap_erase(self, *args)

    def __init__(self, *args):
        _roypy.CamInfoMap_swiginit(self, _roypy.new_CamInfoMap(*args))

    def push_back(self, x):
        return _roypy.CamInfoMap_push_back(self, x)

    def front(self):
        return _roypy.CamInfoMap_front(self)

    def back(self):
        return _roypy.CamInfoMap_back(self)

    def assign(self, n, x):
        return _roypy.CamInfoMap_assign(self, n, x)

    def resize(self, *args):
        return _roypy.CamInfoMap_resize(self, *args)

    def insert(self, *args):
        return _roypy.CamInfoMap_insert(self, *args)

    def reserve(self, n):
        return _roypy.CamInfoMap_reserve(self, n)

    def capacity(self):
        return _roypy.CamInfoMap_capacity(self)
    __swig_destroy__ = _roypy.delete_CamInfoMap

# Register CamInfoMap in _roypy:
_roypy.CamInfoMap_swigregister(CamInfoMap)

class exposurePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _roypy.exposurePair_swiginit(self, _roypy.new_exposurePair(*args))
    first = property(_roypy.exposurePair_first_get, _roypy.exposurePair_first_set)
    second = property(_roypy.exposurePair_second_get, _roypy.exposurePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _roypy.delete_exposurePair

# Register exposurePair in _roypy:
_roypy.exposurePair_swigregister(exposurePair)


def getLensCenter (self):
    x = self.getLensCenterX ()
    y = self.getLensCenterY ()
    return x,y

ICameraDevicePtr.getLensCenter = getLensCenter


def getVersion():
    return _roypy.getVersion()

def getErrorString(status):
    return _roypy.getErrorString(status)
class CameraManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _roypy.CameraManager_swiginit(self, _roypy.new_CameraManager(*args))
    __swig_destroy__ = _roypy.delete_CameraManager

    @staticmethod
    def getAccessLevel(*args):
        return _roypy.CameraManager_getAccessLevel(*args)

    def getConnectedCameraList(self):
        return _roypy.CameraManager_getConnectedCameraList(self)

    def createCamera(self, *args):
        return _roypy.CameraManager_createCamera(self, *args)

    def getConnectedCameraNames(self):
        return _roypy.CameraManager_getConnectedCameraNames(self)

    def registerEventListener(self, listener):
        return _roypy.CameraManager_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.CameraManager_unregisterEventListener(self)

    def setCacheFolder(self, path):
        return _roypy.CameraManager_setCacheFolder(self, path)

# Register CameraManager in _roypy:
_roypy.CameraManager_swigregister(CameraManager)

def CameraManager_getAccessLevel(*args):
    return _roypy.CameraManager_getAccessLevel(*args)

class ICameraDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_ICameraDevice

    def initialize(self, *args):
        return _roypy.ICameraDevice_initialize(self, *args)

    def getId(self):
        return _roypy.ICameraDevice_getId(self)

    def getCameraName(self):
        return _roypy.ICameraDevice_getCameraName(self)

    def setUseCase(self, name):
        return _roypy.ICameraDevice_setUseCase(self, name)

    def getUseCases(self):
        return _roypy.ICameraDevice_getUseCases(self)

    def getStreams(self):
        return _roypy.ICameraDevice_getStreams(self)

    def getCurrentUseCase(self):
        return _roypy.ICameraDevice_getCurrentUseCase(self)

    def setExposureMode(self, exposureMode, streamId=0):
        return _roypy.ICameraDevice_setExposureMode(self, exposureMode, streamId)

    def getExposureMode(self, streamId=0):
        return _roypy.ICameraDevice_getExposureMode(self, streamId)

    def registerDataListener(self, listener):
        return _roypy.ICameraDevice_registerDataListener(self, listener)

    def unregisterDataListener(self):
        return _roypy.ICameraDevice_unregisterDataListener(self)

    def registerDepthImageListener(self, listener):
        return _roypy.ICameraDevice_registerDepthImageListener(self, listener)

    def unregisterDepthImageListener(self):
        return _roypy.ICameraDevice_unregisterDepthImageListener(self)

    def registerPointCloudListener(self, listener):
        return _roypy.ICameraDevice_registerPointCloudListener(self, listener)

    def unregisterPointCloudListener(self):
        return _roypy.ICameraDevice_unregisterPointCloudListener(self)

    def registerIRImageListener(self, listener):
        return _roypy.ICameraDevice_registerIRImageListener(self, listener)

    def unregisterIRImageListener(self):
        return _roypy.ICameraDevice_unregisterIRImageListener(self)

    def registerDepthIRImageListener(self, listener):
        return _roypy.ICameraDevice_registerDepthIRImageListener(self, listener)

    def unregisterDepthIRImageListener(self):
        return _roypy.ICameraDevice_unregisterDepthIRImageListener(self)

    def registerRawDataListener(self, listener):
        return _roypy.ICameraDevice_registerRawDataListener(self, listener)

    def unregisterRawDataListener(self):
        return _roypy.ICameraDevice_unregisterRawDataListener(self)

    def registerEventListener(self, listener):
        return _roypy.ICameraDevice_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.ICameraDevice_unregisterEventListener(self)

    def startCapture(self):
        return _roypy.ICameraDevice_startCapture(self)

    def stopCapture(self):
        return _roypy.ICameraDevice_stopCapture(self)

    def getMaxSensorWidth(self):
        return _roypy.ICameraDevice_getMaxSensorWidth(self)

    def getMaxSensorHeight(self):
        return _roypy.ICameraDevice_getMaxSensorHeight(self)

    def isConnected(self):
        return _roypy.ICameraDevice_isConnected(self)

    def isCalibrated(self):
        return _roypy.ICameraDevice_isCalibrated(self)

    def isCapturing(self):
        return _roypy.ICameraDevice_isCapturing(self)

    def getAccessLevel(self):
        return _roypy.ICameraDevice_getAccessLevel(self)

    def startRecording(self, fileName, numberOfFrames=0, frameSkip=0, msSkip=0):
        return _roypy.ICameraDevice_startRecording(self, fileName, numberOfFrames, frameSkip, msSkip)

    def stopRecording(self):
        return _roypy.ICameraDevice_stopRecording(self)

    def registerRecordListener(self, listener):
        return _roypy.ICameraDevice_registerRecordListener(self, listener)

    def unregisterRecordListener(self):
        return _roypy.ICameraDevice_unregisterRecordListener(self)

    def registerExposureListener(self, listener):
        return _roypy.ICameraDevice_registerExposureListener(self, listener)

    def unregisterExposureListener(self):
        return _roypy.ICameraDevice_unregisterExposureListener(self)

    def registerExposureGroupListener(self, listener):
        return _roypy.ICameraDevice_registerExposureGroupListener(self, listener)

    def unregisterExposureGroupListener(self):
        return _roypy.ICameraDevice_unregisterExposureGroupListener(self)

    def setFrameRate(self, framerate):
        return _roypy.ICameraDevice_setFrameRate(self, framerate)

    def getFrameRate(self):
        return _roypy.ICameraDevice_getFrameRate(self)

    def getMaxFrameRate(self):
        return _roypy.ICameraDevice_getMaxFrameRate(self)

    def setExternalTrigger(self, useExternalTrigger):
        return _roypy.ICameraDevice_setExternalTrigger(self, useExternalTrigger)

    def setFilterPreset(self, preset, streamId=0):
        return _roypy.ICameraDevice_setFilterPreset(self, preset, streamId)

    def getFilterPreset(self, streamId=0):
        return _roypy.ICameraDevice_getFilterPreset(self, streamId)

    def getFilterPresets(self, presets, streamId=0):
        return _roypy.ICameraDevice_getFilterPresets(self, presets, streamId)

    def storeProcessingParams(self):
        return _roypy.ICameraDevice_storeProcessingParams(self)

    def loadProcessingParams(self):
        return _roypy.ICameraDevice_loadProcessingParams(self)

    def isDepthSupported(self, streamId=0):
        return _roypy.ICameraDevice_isDepthSupported(self, streamId)

    def getExposureGroups(self):
        return _roypy.ICameraDevice_getExposureGroups(self)

    def setExposureTime(self, *args):
        return _roypy.ICameraDevice_setExposureTime(self, *args)

    def setExposureForGroups(self):
        return _roypy.ICameraDevice_setExposureForGroups(self)

    def setProcessingParameters(self, parameters, streamId=0):
        return _roypy.ICameraDevice_setProcessingParameters(self, parameters, streamId)

    def getProcessingParameters(self, streamId=0):
        return _roypy.ICameraDevice_getProcessingParameters(self, streamId)

    def registerDataListenerExtended(self, listener):
        return _roypy.ICameraDevice_registerDataListenerExtended(self, listener)

    def unregisterDataListenerExtended(self):
        return _roypy.ICameraDevice_unregisterDataListenerExtended(self)

    def setCallbackData(self, *args):
        return _roypy.ICameraDevice_setCallbackData(self, *args)

    def getCalibrationData(self):
        return _roypy.ICameraDevice_getCalibrationData(self)

    def writeCalibrationToFlash(self):
        return _roypy.ICameraDevice_writeCalibrationToFlash(self)

    def setProcessingThreads(self, numThreads, streamId=0):
        return _roypy.ICameraDevice_setProcessingThreads(self, numThreads, streamId)

    def writeDataToFlash(self, *args):
        return _roypy.ICameraDevice_writeDataToFlash(self, *args)

    def setDutyCycle(self, dutyCycle, index):
        return _roypy.ICameraDevice_setDutyCycle(self, dutyCycle, index)

    def shiftLensCenter(self, tx, ty):
        return _roypy.ICameraDevice_shiftLensCenter(self, tx, ty)

    def getLensParameters(self, *args):
        return _roypy.ICameraDevice_getLensParameters(self, *args)

    def getCameraInfo(self, *args):
        return _roypy.ICameraDevice_getCameraInfo(self, *args)

    def getNumberOfStreams(self, *args):
        return _roypy.ICameraDevice_getNumberOfStreams(self, *args)

    def getExposureLimits(self, *args):
        return _roypy.ICameraDevice_getExposureLimits(self, *args)

    def getLensCenterX(self):
        return _roypy.ICameraDevice_getLensCenterX(self)

    def getLensCenterY(self):
        return _roypy.ICameraDevice_getLensCenterY(self)

    def readRegister(self, registerAddress):
        return _roypy.ICameraDevice_readRegister(self, registerAddress)

    def writeRegister(self, registerAddress, registerValue):
        return _roypy.ICameraDevice_writeRegister(self, registerAddress, registerValue)

    def setExposureTimes(self, exposureTimes):
        return _roypy.ICameraDevice_setExposureTimes(self, exposureTimes)

    def asReplay(self):
        return _roypy.ICameraDevice_asReplay(self)

    def setCalibrationDataFromFile(self, filename):
        return _roypy.ICameraDevice_setCalibrationDataFromFile(self, filename)

    def setCalibrationDataFromBuffer(self, data):
        return _roypy.ICameraDevice_setCalibrationDataFromBuffer(self, data)

# Register ICameraDevice in _roypy:
_roypy.ICameraDevice_swigregister(ICameraDevice)

CameraStatus_SUCCESS = _roypy.CameraStatus_SUCCESS
CameraStatus_RUNTIME_ERROR = _roypy.CameraStatus_RUNTIME_ERROR
CameraStatus_DISCONNECTED = _roypy.CameraStatus_DISCONNECTED
CameraStatus_INVALID_VALUE = _roypy.CameraStatus_INVALID_VALUE
CameraStatus_TIMEOUT = _roypy.CameraStatus_TIMEOUT
CameraStatus_LOGIC_ERROR = _roypy.CameraStatus_LOGIC_ERROR
CameraStatus_NOT_IMPLEMENTED = _roypy.CameraStatus_NOT_IMPLEMENTED
CameraStatus_OUT_OF_BOUNDS = _roypy.CameraStatus_OUT_OF_BOUNDS
CameraStatus_RESOURCE_ERROR = _roypy.CameraStatus_RESOURCE_ERROR
CameraStatus_FILE_NOT_FOUND = _roypy.CameraStatus_FILE_NOT_FOUND
CameraStatus_COULD_NOT_OPEN = _roypy.CameraStatus_COULD_NOT_OPEN
CameraStatus_DATA_NOT_FOUND = _roypy.CameraStatus_DATA_NOT_FOUND
CameraStatus_DEVICE_IS_BUSY = _roypy.CameraStatus_DEVICE_IS_BUSY
CameraStatus_WRONG_DATA_FORMAT_FOUND = _roypy.CameraStatus_WRONG_DATA_FORMAT_FOUND
CameraStatus_USECASE_NOT_SUPPORTED = _roypy.CameraStatus_USECASE_NOT_SUPPORTED
CameraStatus_FRAMERATE_NOT_SUPPORTED = _roypy.CameraStatus_FRAMERATE_NOT_SUPPORTED
CameraStatus_EXPOSURE_TIME_NOT_SUPPORTED = _roypy.CameraStatus_EXPOSURE_TIME_NOT_SUPPORTED
CameraStatus_DEVICE_NOT_INITIALIZED = _roypy.CameraStatus_DEVICE_NOT_INITIALIZED
CameraStatus_CALIBRATION_DATA_ERROR = _roypy.CameraStatus_CALIBRATION_DATA_ERROR
CameraStatus_INSUFFICIENT_PRIVILEGES = _roypy.CameraStatus_INSUFFICIENT_PRIVILEGES
CameraStatus_DEVICE_ALREADY_INITIALIZED = _roypy.CameraStatus_DEVICE_ALREADY_INITIALIZED
CameraStatus_EXPOSURE_MODE_INVALID = _roypy.CameraStatus_EXPOSURE_MODE_INVALID
CameraStatus_NO_CALIBRATION_DATA = _roypy.CameraStatus_NO_CALIBRATION_DATA
CameraStatus_INSUFFICIENT_BANDWIDTH = _roypy.CameraStatus_INSUFFICIENT_BANDWIDTH
CameraStatus_DUTYCYCLE_NOT_SUPPORTED = _roypy.CameraStatus_DUTYCYCLE_NOT_SUPPORTED
CameraStatus_SPECTRE_NOT_INITIALIZED = _roypy.CameraStatus_SPECTRE_NOT_INITIALIZED
CameraStatus_NO_USE_CASES = _roypy.CameraStatus_NO_USE_CASES
CameraStatus_NO_USE_CASES_FOR_LEVEL = _roypy.CameraStatus_NO_USE_CASES_FOR_LEVEL
CameraStatus_FSM_INVALID_TRANSITION = _roypy.CameraStatus_FSM_INVALID_TRANSITION
CameraStatus_UNKNOWN = _roypy.CameraStatus_UNKNOWN

def getStatusString(status):
    return _roypy.getStatusString(status)

def __lshift__(os, status):
    return _roypy.__lshift__(os, status)
CameraAccessLevel_L1 = _roypy.CameraAccessLevel_L1
CameraAccessLevel_L2 = _roypy.CameraAccessLevel_L2
CameraAccessLevel_L3 = _roypy.CameraAccessLevel_L3
CameraAccessLevel_L4 = _roypy.CameraAccessLevel_L4
class IDepthDataListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IDepthDataListener

    def onNewData(self, data):
        return _roypy.IDepthDataListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IDepthDataListener:
            _self = None
        else:
            _self = self
        _roypy.IDepthDataListener_swiginit(self, _roypy.new_IDepthDataListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IDepthDataListener(self)
        return weakref.proxy(self)

# Register IDepthDataListener in _roypy:
_roypy.IDepthDataListener_swigregister(IDepthDataListener)

class IDepthImageListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IDepthImageListener

    def onNewData(self, data):
        return _roypy.IDepthImageListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IDepthImageListener:
            _self = None
        else:
            _self = self
        _roypy.IDepthImageListener_swiginit(self, _roypy.new_IDepthImageListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IDepthImageListener(self)
        return weakref.proxy(self)

# Register IDepthImageListener in _roypy:
_roypy.IDepthImageListener_swigregister(IDepthImageListener)

class IIRImageListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IIRImageListener

    def onNewData(self, data):
        return _roypy.IIRImageListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IIRImageListener:
            _self = None
        else:
            _self = self
        _roypy.IIRImageListener_swiginit(self, _roypy.new_IIRImageListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IIRImageListener(self)
        return weakref.proxy(self)

# Register IIRImageListener in _roypy:
_roypy.IIRImageListener_swigregister(IIRImageListener)

class IDepthIRImageListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IDepthIRImageListener

    def onNewData(self, data):
        return _roypy.IDepthIRImageListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IDepthIRImageListener:
            _self = None
        else:
            _self = self
        _roypy.IDepthIRImageListener_swiginit(self, _roypy.new_IDepthIRImageListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IDepthIRImageListener(self)
        return weakref.proxy(self)

# Register IDepthIRImageListener in _roypy:
_roypy.IDepthIRImageListener_swigregister(IDepthIRImageListener)

class IRawDataListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IRawDataListener

    def onNewData(self, data):
        return _roypy.IRawDataListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IRawDataListener:
            _self = None
        else:
            _self = self
        _roypy.IRawDataListener_swiginit(self, _roypy.new_IRawDataListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IRawDataListener(self)
        return weakref.proxy(self)

# Register IRawDataListener in _roypy:
_roypy.IRawDataListener_swigregister(IRawDataListener)

class IExtendedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IExtendedData

    def hasDepthData(self):
        return _roypy.IExtendedData_hasDepthData(self)

    def hasIntermediateData(self):
        return _roypy.IExtendedData_hasIntermediateData(self)

    def getDepthData(self):
        return _roypy.IExtendedData_getDepthData(self)

    def getIntermediateData(self):
        return _roypy.IExtendedData_getIntermediateData(self)

# Register IExtendedData in _roypy:
_roypy.IExtendedData_swigregister(IExtendedData)

CallbackData__None = _roypy.CallbackData__None
CallbackData_Raw = _roypy.CallbackData_Raw
CallbackData_Depth = _roypy.CallbackData_Depth
CallbackData_Intermediate = _roypy.CallbackData_Intermediate
class IntermediatePoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_roypy.IntermediatePoint_distance_get, _roypy.IntermediatePoint_distance_set)
    amplitude = property(_roypy.IntermediatePoint_amplitude_get, _roypy.IntermediatePoint_amplitude_set)
    intensity = property(_roypy.IntermediatePoint_intensity_get, _roypy.IntermediatePoint_intensity_set)
    flags = property(_roypy.IntermediatePoint_flags_get, _roypy.IntermediatePoint_flags_set)

    def __init__(self):
        _roypy.IntermediatePoint_swiginit(self, _roypy.new_IntermediatePoint())
    __swig_destroy__ = _roypy.delete_IntermediatePoint

# Register IntermediatePoint in _roypy:
_roypy.IntermediatePoint_swigregister(IntermediatePoint)

class IntermediateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeStamp = property(_roypy.IntermediateData_timeStamp_get, _roypy.IntermediateData_timeStamp_set)
    streamId = property(_roypy.IntermediateData_streamId_get, _roypy.IntermediateData_streamId_set)
    width = property(_roypy.IntermediateData_width_get, _roypy.IntermediateData_width_set)
    height = property(_roypy.IntermediateData_height_get, _roypy.IntermediateData_height_set)
    modulationFrequencies = property(_roypy.IntermediateData_modulationFrequencies_get, _roypy.IntermediateData_modulationFrequencies_set)
    exposureTimes = property(_roypy.IntermediateData_exposureTimes_get, _roypy.IntermediateData_exposureTimes_set)
    numFrequencies = property(_roypy.IntermediateData_numFrequencies_get, _roypy.IntermediateData_numFrequencies_set)
    rawFrameCount = property(_roypy.IntermediateData_rawFrameCount_get, _roypy.IntermediateData_rawFrameCount_set)
    processingParameters = property(_roypy.IntermediateData_processingParameters_get, _roypy.IntermediateData_processingParameters_set)
    hasFlags = property(_roypy.IntermediateData_hasFlags_get, _roypy.IntermediateData_hasFlags_set)
    flags = property(_roypy.IntermediateData_flags_get, _roypy.IntermediateData_flags_set)
    hasIntensities = property(_roypy.IntermediateData_hasIntensities_get, _roypy.IntermediateData_hasIntensities_set)
    intensities = property(_roypy.IntermediateData_intensities_get, _roypy.IntermediateData_intensities_set)
    hasDistances = property(_roypy.IntermediateData_hasDistances_get, _roypy.IntermediateData_hasDistances_set)
    distances = property(_roypy.IntermediateData_distances_get, _roypy.IntermediateData_distances_set)
    hasAmplitudes = property(_roypy.IntermediateData_hasAmplitudes_get, _roypy.IntermediateData_hasAmplitudes_set)
    amplitudes = property(_roypy.IntermediateData_amplitudes_get, _roypy.IntermediateData_amplitudes_set)
    hasNoise = property(_roypy.IntermediateData_hasNoise_get, _roypy.IntermediateData_hasNoise_set)
    noise = property(_roypy.IntermediateData_noise_get, _roypy.IntermediateData_noise_set)

    def __init__(self):
        _roypy.IntermediateData_swiginit(self, _roypy.new_IntermediateData())

    def getLegacyPoint(self, idx):
        return _roypy.IntermediateData_getLegacyPoint(self, idx)

    def getLegacyPoints(self):
        return _roypy.IntermediateData_getLegacyPoints(self)

    def getDistance(self, idx):
        return _roypy.IntermediateData_getDistance(self, idx)

    def getAmplitude(self, idx):
        return _roypy.IntermediateData_getAmplitude(self, idx)

    def getIntensity(self, idx):
        return _roypy.IntermediateData_getIntensity(self, idx)

    def getNoise(self, idx):
        return _roypy.IntermediateData_getNoise(self, idx)

    def getFlags(self, idx):
        return _roypy.IntermediateData_getFlags(self, idx)

    def getNumPoints(self):
        return _roypy.IntermediateData_getNumPoints(self)

    def getNumberOfRawFrames(self):
        return _roypy.IntermediateData_getNumberOfRawFrames(self)

    def getIsCopy(self):
        return _roypy.IntermediateData_getIsCopy(self)
    __swig_destroy__ = _roypy.delete_IntermediateData

# Register IntermediateData in _roypy:
_roypy.IntermediateData_swigregister(IntermediateData)

class IExtendedDataListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IExtendedDataListener

    def onNewData(self, data):
        return _roypy.IExtendedDataListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IExtendedDataListener:
            _self = None
        else:
            _self = self
        _roypy.IExtendedDataListener_swiginit(self, _roypy.new_IExtendedDataListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IExtendedDataListener(self)
        return weakref.proxy(self)

# Register IExtendedDataListener in _roypy:
_roypy.IExtendedDataListener_swigregister(IExtendedDataListener)

class IRecordStopListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IRecordStopListener

    def onRecordingStopped(self, numFrames):
        return _roypy.IRecordStopListener_onRecordingStopped(self, numFrames)

    def __init__(self):
        if self.__class__ == IRecordStopListener:
            _self = None
        else:
            _self = self
        _roypy.IRecordStopListener_swiginit(self, _roypy.new_IRecordStopListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IRecordStopListener(self)
        return weakref.proxy(self)

# Register IRecordStopListener in _roypy:
_roypy.IRecordStopListener_swigregister(IRecordStopListener)

class DepthPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_roypy.DepthPoint_x_get, _roypy.DepthPoint_x_set)
    y = property(_roypy.DepthPoint_y_get, _roypy.DepthPoint_y_set)
    z = property(_roypy.DepthPoint_z_get, _roypy.DepthPoint_z_set)
    noise = property(_roypy.DepthPoint_noise_get, _roypy.DepthPoint_noise_set)
    grayValue = property(_roypy.DepthPoint_grayValue_get, _roypy.DepthPoint_grayValue_set)
    depthConfidence = property(_roypy.DepthPoint_depthConfidence_get, _roypy.DepthPoint_depthConfidence_set)

    def __init__(self):
        _roypy.DepthPoint_swiginit(self, _roypy.new_DepthPoint())
    __swig_destroy__ = _roypy.delete_DepthPoint

# Register DepthPoint in _roypy:
_roypy.DepthPoint_swigregister(DepthPoint)

class DepthData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeStamp = property(_roypy.DepthData_timeStamp_get, _roypy.DepthData_timeStamp_set)
    streamId = property(_roypy.DepthData_streamId_get, _roypy.DepthData_streamId_set)
    width = property(_roypy.DepthData_width_get, _roypy.DepthData_width_set)
    height = property(_roypy.DepthData_height_get, _roypy.DepthData_height_set)
    exposureTimes = property(_roypy.DepthData_exposureTimes_get, _roypy.DepthData_exposureTimes_set)
    hasDepth = property(_roypy.DepthData_hasDepth_get, _roypy.DepthData_hasDepth_set)
    illuminationTemperature = property(_roypy.DepthData_illuminationTemperature_get, _roypy.DepthData_illuminationTemperature_set)
    coordinates = property(_roypy.DepthData_coordinates_get, _roypy.DepthData_coordinates_set)
    hasAmplitudes = property(_roypy.DepthData_hasAmplitudes_get, _roypy.DepthData_hasAmplitudes_set)
    amplitudes = property(_roypy.DepthData_amplitudes_get, _roypy.DepthData_amplitudes_set)

    def __init__(self):
        _roypy.DepthData_swiginit(self, _roypy.new_DepthData())

    def getLegacyPoint(self, idx):
        return _roypy.DepthData_getLegacyPoint(self, idx)

    def getLegacyPoints(self):
        return _roypy.DepthData_getLegacyPoints(self)

    def getX(self, idx):
        return _roypy.DepthData_getX(self, idx)

    def getY(self, idx):
        return _roypy.DepthData_getY(self, idx)

    def getZ(self, idx):
        return _roypy.DepthData_getZ(self, idx)

    def getGrayValue(self, idx):
        return _roypy.DepthData_getGrayValue(self, idx)

    def getDepthConfidence(self, idx):
        return _roypy.DepthData_getDepthConfidence(self, idx)

    def getNumPoints(self):
        return _roypy.DepthData_getNumPoints(self)

    def getIsCopy(self):
        return _roypy.DepthData_getIsCopy(self)

    def fastPoints(self, p):
        return _roypy.DepthData_fastPoints(self, p)

    def npoints (self):
        return self.fastPoints(self.width * self.height * 5).reshape(-1,self.width,5)

    __swig_destroy__ = _roypy.delete_DepthData

# Register DepthData in _roypy:
_roypy.DepthData_swigregister(DepthData)

class DepthImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_roypy.DepthImage_timestamp_get, _roypy.DepthImage_timestamp_set)
    streamId = property(_roypy.DepthImage_streamId_get, _roypy.DepthImage_streamId_set)
    width = property(_roypy.DepthImage_width_get, _roypy.DepthImage_width_set)
    height = property(_roypy.DepthImage_height_get, _roypy.DepthImage_height_set)
    data = property(_roypy.DepthImage_data_get, _roypy.DepthImage_data_set)
    hasConfidence = property(_roypy.DepthImage_hasConfidence_get, _roypy.DepthImage_hasConfidence_set)

    def __init__(self):
        _roypy.DepthImage_swiginit(self, _roypy.new_DepthImage())

    def getDepth(self, idx):
        return _roypy.DepthImage_getDepth(self, idx)

    def getNumPoints(self):
        return _roypy.DepthImage_getNumPoints(self)

    def getIsCopy(self):
        return _roypy.DepthImage_getIsCopy(self)
    __swig_destroy__ = _roypy.delete_DepthImage

# Register DepthImage in _roypy:
_roypy.DepthImage_swigregister(DepthImage)

class DepthIRImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_roypy.DepthIRImage_timestamp_get, _roypy.DepthIRImage_timestamp_set)
    streamId = property(_roypy.DepthIRImage_streamId_get, _roypy.DepthIRImage_streamId_set)
    width = property(_roypy.DepthIRImage_width_get, _roypy.DepthIRImage_width_set)
    height = property(_roypy.DepthIRImage_height_get, _roypy.DepthIRImage_height_set)
    dpData = property(_roypy.DepthIRImage_dpData_get, _roypy.DepthIRImage_dpData_set)
    irData = property(_roypy.DepthIRImage_irData_get, _roypy.DepthIRImage_irData_set)
    hasConfidence = property(_roypy.DepthIRImage_hasConfidence_get, _roypy.DepthIRImage_hasConfidence_set)

    def __init__(self):
        _roypy.DepthIRImage_swiginit(self, _roypy.new_DepthIRImage())

    def getIR(self, idx):
        return _roypy.DepthIRImage_getIR(self, idx)

    def getDepth(self, idx):
        return _roypy.DepthIRImage_getDepth(self, idx)

    def getNumPoints(self):
        return _roypy.DepthIRImage_getNumPoints(self)

    def getIsCopy(self):
        return _roypy.DepthIRImage_getIsCopy(self)
    __swig_destroy__ = _roypy.delete_DepthIRImage

# Register DepthIRImage in _roypy:
_roypy.DepthIRImage_swigregister(DepthIRImage)

class IRImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_roypy.IRImage_timestamp_get, _roypy.IRImage_timestamp_set)
    streamId = property(_roypy.IRImage_streamId_get, _roypy.IRImage_streamId_set)
    width = property(_roypy.IRImage_width_get, _roypy.IRImage_width_set)
    height = property(_roypy.IRImage_height_get, _roypy.IRImage_height_set)
    data = property(_roypy.IRImage_data_get, _roypy.IRImage_data_set)

    def __init__(self):
        _roypy.IRImage_swiginit(self, _roypy.new_IRImage())

    def getIR(self, idx):
        return _roypy.IRImage_getIR(self, idx)

    def getNumPoints(self):
        return _roypy.IRImage_getNumPoints(self)

    def getIsCopy(self):
        return _roypy.IRImage_getIsCopy(self)
    __swig_destroy__ = _roypy.delete_IRImage

# Register IRImage in _roypy:
_roypy.IRImage_swigregister(IRImage)

class RawData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _roypy.RawData_swiginit(self, _roypy.new_RawData(*args))
    timeStamp = property(_roypy.RawData_timeStamp_get, _roypy.RawData_timeStamp_set)
    streamId = property(_roypy.RawData_streamId_get, _roypy.RawData_streamId_set)
    width = property(_roypy.RawData_width_get, _roypy.RawData_width_set)
    height = property(_roypy.RawData_height_get, _roypy.RawData_height_set)
    exposureGroupNames = property(_roypy.RawData_exposureGroupNames_get, _roypy.RawData_exposureGroupNames_set)
    rawFrameCount = property(_roypy.RawData_rawFrameCount_get, _roypy.RawData_rawFrameCount_set)
    modulationFrequencies = property(_roypy.RawData_modulationFrequencies_get, _roypy.RawData_modulationFrequencies_set)
    exposureTimes = property(_roypy.RawData_exposureTimes_get, _roypy.RawData_exposureTimes_set)
    illuminationTemperature = property(_roypy.RawData_illuminationTemperature_get, _roypy.RawData_illuminationTemperature_set)
    phaseAngles = property(_roypy.RawData_phaseAngles_get, _roypy.RawData_phaseAngles_set)
    illuminationEnabled = property(_roypy.RawData_illuminationEnabled_get, _roypy.RawData_illuminationEnabled_set)
    modulationScheme = property(_roypy.RawData_modulationScheme_get, _roypy.RawData_modulationScheme_set)

    def getRawData(self, idx):
        return _roypy.RawData_getRawData(self, idx)

    def getPseudoData(self, idx):
        return _roypy.RawData_getPseudoData(self, idx)

    def getNumberOfRawFrames(self):
        return _roypy.RawData_getNumberOfRawFrames(self)

    def getRawPhase(self, idx):
        return _roypy.RawData_getRawPhase(self, idx)
    __swig_destroy__ = _roypy.delete_RawData

# Register RawData in _roypy:
_roypy.RawData_swigregister(RawData)


def getProcessingFlagName(procFlag):
    return _roypy.getProcessingFlagName(procFlag)

def parseProcessingFlagName(modeName, processingFlag):
    return _roypy.parseProcessingFlagName(modeName, processingFlag)

def getProcessingFlagType(name, flagType):
    return _roypy.getProcessingFlagType(name, flagType)

def convertLegacyRoyaleParameters(map):
    return _roypy.convertLegacyRoyaleParameters(map)
ExposureMode_MANUAL = _roypy.ExposureMode_MANUAL
ExposureMode_AUTOMATIC = _roypy.ExposureMode_AUTOMATIC
FilterPreset_Off = _roypy.FilterPreset_Off
FilterPreset_Deprecated1 = _roypy.FilterPreset_Deprecated1
FilterPreset_Deprecated2 = _roypy.FilterPreset_Deprecated2
FilterPreset_Deprecated3 = _roypy.FilterPreset_Deprecated3
FilterPreset_Deprecated4 = _roypy.FilterPreset_Deprecated4
FilterPreset_IR1 = _roypy.FilterPreset_IR1
FilterPreset_IR2 = _roypy.FilterPreset_IR2
FilterPreset_AF1 = _roypy.FilterPreset_AF1
FilterPreset_CM1 = _roypy.FilterPreset_CM1
FilterPreset_Binning_1_Basic = _roypy.FilterPreset_Binning_1_Basic
FilterPreset_Binning_2_Basic = _roypy.FilterPreset_Binning_2_Basic
FilterPreset_Binning_3_Basic = _roypy.FilterPreset_Binning_3_Basic
FilterPreset_Binning_4_Basic = _roypy.FilterPreset_Binning_4_Basic
FilterPreset_Binning_8_Basic = _roypy.FilterPreset_Binning_8_Basic
FilterPreset_Binning_10_Basic = _roypy.FilterPreset_Binning_10_Basic
FilterPreset_Binning_1_Efficiency = _roypy.FilterPreset_Binning_1_Efficiency
FilterPreset_Binning_2_Efficiency = _roypy.FilterPreset_Binning_2_Efficiency
FilterPreset_Binning_3_Efficiency = _roypy.FilterPreset_Binning_3_Efficiency
FilterPreset_Binning_4_Efficiency = _roypy.FilterPreset_Binning_4_Efficiency
FilterPreset_Binning_8_Efficiency = _roypy.FilterPreset_Binning_8_Efficiency
FilterPreset_Binning_10_Efficiency = _roypy.FilterPreset_Binning_10_Efficiency
FilterPreset_Fast1 = _roypy.FilterPreset_Fast1
FilterPreset_Spot1 = _roypy.FilterPreset_Spot1
FilterPreset_Legacy = _roypy.FilterPreset_Legacy
FilterPreset_Full = _roypy.FilterPreset_Full
FilterPreset_Custom = _roypy.FilterPreset_Custom

def getFilterPresetName(preset):
    return _roypy.getFilterPresetName(preset)

def getFilterPresetFromName(name):
    return _roypy.getFilterPresetFromName(name)
class LensParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    principalPoint = property(_roypy.LensParameters_principalPoint_get, _roypy.LensParameters_principalPoint_set)
    focalLength = property(_roypy.LensParameters_focalLength_get, _roypy.LensParameters_focalLength_set)
    distortionTangential = property(_roypy.LensParameters_distortionTangential_get, _roypy.LensParameters_distortionTangential_set)
    distortionRadial = property(_roypy.LensParameters_distortionRadial_get, _roypy.LensParameters_distortionRadial_set)

    def __init__(self):
        _roypy.LensParameters_swiginit(self, _roypy.new_LensParameters())
    __swig_destroy__ = _roypy.delete_LensParameters

# Register LensParameters in _roypy:
_roypy.LensParameters_swigregister(LensParameters)

class IReplay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IReplay

    def seek(self, frameNumber):
        return _roypy.IReplay_seek(self, frameNumber)

    def loop(self, restart):
        return _roypy.IReplay_loop(self, restart)

    def useTimestamps(self, timestampsUsed):
        return _roypy.IReplay_useTimestamps(self, timestampsUsed)

    def frameCount(self):
        return _roypy.IReplay_frameCount(self)

    def currentFrame(self):
        return _roypy.IReplay_currentFrame(self)

    def pause(self):
        return _roypy.IReplay_pause(self)

    def resume(self):
        return _roypy.IReplay_resume(self)

    def registerStopListener(self, listener):
        return _roypy.IReplay_registerStopListener(self, listener)

    def unregisterStopListener(self):
        return _roypy.IReplay_unregisterStopListener(self)

    def getFileVersion(self):
        return _roypy.IReplay_getFileVersion(self)

    def getMajorVersion(self):
        return _roypy.IReplay_getMajorVersion(self)

    def getMinorVersion(self):
        return _roypy.IReplay_getMinorVersion(self)

    def getPatchVersion(self):
        return _roypy.IReplay_getPatchVersion(self)

    def getBuildVersion(self):
        return _roypy.IReplay_getBuildVersion(self)

    def setPlaybackRange(self, first, last):
        return _roypy.IReplay_setPlaybackRange(self, first, last)

    def getPlaybackRange(self, first, last):
        return _roypy.IReplay_getPlaybackRange(self, first, last)

# Register IReplay in _roypy:
_roypy.IReplay_swigregister(IReplay)

ModulationScheme_MODULATION_SCHEME_CW = _roypy.ModulationScheme_MODULATION_SCHEME_CW
ModulationScheme_MODULATION_SCHEME_CW_HC = _roypy.ModulationScheme_MODULATION_SCHEME_CW_HC
ModulationScheme_MODULATION_SCHEME_CM_MLS2 = _roypy.ModulationScheme_MODULATION_SCHEME_CM_MLS2
ModulationScheme_MODULATION_SCHEME_CM_MLSB = _roypy.ModulationScheme_MODULATION_SCHEME_CM_MLSB
ModulationScheme_MODULATION_SCHEME_CM_MLSK = _roypy.ModulationScheme_MODULATION_SCHEME_CM_MLSK
ModulationScheme_MODULATION_SCHEME_CM_MLSG = _roypy.ModulationScheme_MODULATION_SCHEME_CM_MLSG
ModulationScheme_MODULATION_SCHEME_NONE = _roypy.ModulationScheme_MODULATION_SCHEME_NONE
ModulationScheme_MODULATION_SCHEME_CW_DOT = _roypy.ModulationScheme_MODULATION_SCHEME_CW_DOT
ModulationScheme_MODULATION_SCHEME_NONE_LEGACY = _roypy.ModulationScheme_MODULATION_SCHEME_NONE_LEGACY
ModulationScheme_MODULATION_SCHEME_SPOT_HYBRID1 = _roypy.ModulationScheme_MODULATION_SCHEME_SPOT_HYBRID1
ModulationScheme_MODULATION_SCHEME_SPOT_HYBRID2 = _roypy.ModulationScheme_MODULATION_SCHEME_SPOT_HYBRID2
EventSeverity_ROYALE_INFO = _roypy.EventSeverity_ROYALE_INFO
EventSeverity_ROYALE_WARNING = _roypy.EventSeverity_ROYALE_WARNING
EventSeverity_ROYALE_ERROR = _roypy.EventSeverity_ROYALE_ERROR
EventSeverity_ROYALE_FATAL = _roypy.EventSeverity_ROYALE_FATAL
EventType_ROYALE_CAPTURE_STREAM = _roypy.EventType_ROYALE_CAPTURE_STREAM
EventType_ROYALE_DEVICE_DISCONNECTED = _roypy.EventType_ROYALE_DEVICE_DISCONNECTED
EventType_ROYALE_OVER_TEMPERATURE = _roypy.EventType_ROYALE_OVER_TEMPERATURE
EventType_ROYALE_RAW_FRAME_STATS = _roypy.EventType_ROYALE_RAW_FRAME_STATS
EventType_ROYALE_EYE_SAFETY = _roypy.EventType_ROYALE_EYE_SAFETY
EventType_ROYALE_PROCESSING = _roypy.EventType_ROYALE_PROCESSING
EventType_ROYALE_RECORDING = _roypy.EventType_ROYALE_RECORDING
EventType_ROYALE_FRAME_DROP = _roypy.EventType_ROYALE_FRAME_DROP
EventType_ROYALE_UNKNOWN = _roypy.EventType_ROYALE_UNKNOWN
EventType_ROYALE_ERROR_DESCRIPTION = _roypy.EventType_ROYALE_ERROR_DESCRIPTION
class IEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IEvent

    def severity(self):
        return _roypy.IEvent_severity(self)

    def describe(self):
        return _roypy.IEvent_describe(self)

    def type(self):
        return _roypy.IEvent_type(self)

# Register IEvent in _roypy:
_roypy.IEvent_swigregister(IEvent)

class IEventListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IEventListener

    def onEvent(self, event):
        return _roypy.IEventListener_onEvent(self, event)

# Register IEventListener in _roypy:
_roypy.IEventListener_swigregister(IEventListener)

class PythonEventListener(IEventListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_PythonEventListener

    def onEvent(self, event):
        return _roypy.PythonEventListener_onEvent(self, event)

    def onEventPython(self, severity, description, type):
        return _roypy.PythonEventListener_onEventPython(self, severity, description, type)

    def __init__(self):
        if self.__class__ == PythonEventListener:
            _self = None
        else:
            _self = self
        _roypy.PythonEventListener_swiginit(self, _roypy.new_PythonEventListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _roypy.disown_PythonEventListener(self)
        return weakref.proxy(self)

# Register PythonEventListener in _roypy:
_roypy.PythonEventListener_swigregister(PythonEventListener)



