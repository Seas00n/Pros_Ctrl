"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class msg_t(object):
    __slots__ = ["knee_position_desired", "ankle_position_desired", "knee_velocity_desired", "ankle_velocity_desired", "knee_torque_desired", "ankle_torque_desired", "Mode", "Kp", "Kd", "Angle_eq"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "byte", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.knee_position_desired = 0.0
        self.ankle_position_desired = 0.0
        self.knee_velocity_desired = 0.0
        self.ankle_velocity_desired = 0.0
        self.knee_torque_desired = 0.0
        self.ankle_torque_desired = 0.0
        self.Mode = 0
        self.Kp = 0.0
        self.Kd = 0.0
        self.Angle_eq = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffffBfff", self.knee_position_desired, self.ankle_position_desired, self.knee_velocity_desired, self.ankle_velocity_desired, self.knee_torque_desired, self.ankle_torque_desired, self.Mode, self.Kp, self.Kd, self.Angle_eq))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = msg_t()
        self.knee_position_desired, self.ankle_position_desired, self.knee_velocity_desired, self.ankle_velocity_desired, self.knee_torque_desired, self.ankle_torque_desired, self.Mode, self.Kp, self.Kd, self.Angle_eq = struct.unpack(">ffffffBfff", buf.read(37))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if msg_t in parents: return 0
        tmphash = (0x1d1adfc232e6da1c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if msg_t._packed_fingerprint is None:
            msg_t._packed_fingerprint = struct.pack(">Q", msg_t._get_hash_recursive([]))
        return msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", msg_t._get_packed_fingerprint())[0]

